#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

// #include <dt-bindings/zmk/outputs.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick_tap_ms = <200>; };

&mt { quick_tap_ms = <200>; };

&gresc { mods = <(MOD_LSFT)>; };

/ {
    combos {
        compatible = "zmk,combos";

        del {
            bindings = <&kp DEL>;
            key-positions = <26 27>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // |   ESC   |    Q    |    W    |    E    |    R    |    T    |                                          |    Y    |    U    |    I    |    O    |    P    |    \    |
            // |   TAB   |    A    |    S    |    D    |    F    |    G    |                                          |    H    |    J    |    K    |    L    |    ;    |    '    |
            // |   GUI   |    Z    |    X    |    C    |    V    |    B    |                                          |    N    |    M    |    ,    |    .    |    /    |  R CTRL |
            //                     |   GUI   |   DEL   | RETURN  |  SPACE  |                                          |  SHIFT  |   ENTER   |   BSPC  |  R ALT  |

            bindings = <
&kp ESC       &kp Q  &kp W        &kp E      &kp R             &kp T        &kp Y           &kp U        &kp I      &kp O                &kp P     &kp LEFT_BRACKET
&kp TAB       &kp A  &kp S        &kp D      &mt LEFT_SHIFT F  &kp G        &kp H           &kp J        &kp K      &kp L                &kp SEMI  &kp SQT
&kp LEFT_GUI  &kp Z  &kp X        &kp C      &kp V             &kp B        &kp N           &kp M        &kp COMMA  &kp DOT              &kp FSLH  &lt 2 SLASH
                     &lt 3 GRAVE  &kp LCTRL  &kp LEFT_ALT      &lt 1 SPACE  &kp LEFT_SHIFT  &lt 1 ENTER  &kp BSPC   &lt 2 RIGHT_BRACKET
            >;
        };

        lower_layer {
            bindings = <
&kp ESC        &kp SLASH       &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp ENTER  &kp F1           &kp F3    &kp F4    &kp F11    &kp F12       &kp BSLH
&kp DOT        &kp LEFT_SHIFT  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp EQUAL  &kp PRINTSCREEN  &kp LEFT  &kp UP    &kp RIGHT  &kp DEL       &kp SQT
&kp BACKSLASH  &kp BACKSPACE   &kp N7        &kp N8        &kp N9        &kp MINUS  &none            &none     &kp DOWN  &kp DOT    &kp C_VOL_DN  &kp C_VOL_UP
                               &kp N0        &trans        &trans        &trans     &trans           &trans    &trans    &none
            >;
        };

        gaming_2 {
            bindings = <
&kp ESCAPE  &kp B           &kp Q   &kp G   &kp R   &kp NUMBER_2  &kp PRINTSCREEN  &trans          &trans          &trans           &trans  &trans
&kp TAB     &kp LEFT_SHIFT  &kp A   &kp W   &kp D   &kp NUMBER_3  &kp K            &kp LEFT_ARROW  &kp UP_ARROW    &kp RIGHT_ARROW  &trans  &trans
&kp X       &kp GRAVE       &kp C   &kp S   &kp E   &kp V         &trans           &trans          &kp DOWN_ARROW  &trans           &trans  &trans
                            &trans  &trans  &trans  &trans        &trans           &trans          &trans          &trans
            >;
        };

        gaming_3 {
            bindings = <
&trans  &lt 4 NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_5      &kp NUMBER_6  &trans           &kp F4  &kp F12  &trans  &trans  &trans
&trans  &kp Q           &kp W         &kp E         &mt LEFT_SHIFT R  &kp T         &kp PRINTSCREEN  &trans  &trans   &trans  &trans  &trans
&trans  &kp NUMBER_4    &kp S         &kp D         &kp G             &kp B         &trans           &trans  &trans   &trans  &trans  &trans
                        &trans        &trans        &trans            &trans        &trans           &trans  &trans   &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
